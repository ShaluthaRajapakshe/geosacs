#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import Vector3, PoseStamped
from std_msgs.msg import Float64
import numpy as np
import sys
import rospkg
import operator

last_pos = None
delta_pos = np.array([0.0, 0.0, 0.0])
clutch = True

def saveInput(data):
    global last_pos, delta_pos
    if last_pos is not None:
        pos = np.array([data.x, data.y, data.z])
        delta_pos = 2.0*(pos-last_pos)
        last_pos = pos
    else:
        last_pos = np.array([data.x, data.y, data.z])

def saveButton(data):
    global clutch
    if data.data == 1:
        clutch = True
    else:
        clutch = False


def loop():
    global delta_pos,clutch
    rate = rospy.Rate(1000) # 1000hz
    ikpub = rospy.Publisher('/panda_ik/input', PoseStamped, queue_size=1)
    pos = np.array([0.5, 0.0, 0.2])

    pose = PoseStamped()
    pose.header.frame_id="panda_gripper_joint"
    pose.pose.orientation.w = 1.0
    pose.pose.orientation.x = 0.0
    pose.pose.orientation.y = 0.0
    pose.pose.orientation.z = 0.0

    while not rospy.is_shutdown():
        if not clutch:
            pos += delta_pos # this is where you could rotate based on curr drone tx
        delta_pos = np.array([0.0, 0.0, 0.0])

        pose.pose.position.x = pos[0]
        pose.pose.position.y = pos[1]
        pose.pose.position.z = pos[2]
        ikpub.publish(pose)
        rate.sleep()


def convertFD():
    rospy.init_node('fd_converter')
    rospy.Subscriber("/fdinput/input", Vector3, saveInput)
    rospy.Subscriber("/fdinput/button", Float64, saveButton)
    loop()

if __name__ == '__main__':
    convertFD()


