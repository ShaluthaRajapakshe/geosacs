#!/usr/bin/env python
from djitellopy import Tello
import cv2,time
import rospy
import ros_numpy
from sensor_msgs.msg import Image
from std_msgs.msg import Int16, String
from geometry_msgs.msg import Twist
from sensor_msgs.msg import CameraInfo
import tf
from tf.transformations import *
import tf2_ros
import signal
import sys


REFERENCE_FRAME='panda_link0'

class TelloDriver(object):
    def __init__(self):
        self._br = tf2_ros.TransformBroadcaster()
        self._tfBuffer = tf2_ros.Buffer()
        self._tl = tf2_ros.TransformListener(self._tfBuffer)
        rospy.sleep(.5)

        self._tookoff = False

        self._image_pub = rospy.Publisher("/tello/image",Image, queue_size=1)
        self._battery_pub = rospy.Publisher("/tello/battery", Int16, queue_size=1)
        
        self._tello = Tello()
        self._tello .connect()
        self._tello.streamon()
        self._frame_read = self._tello.get_frame_read()

        self._command_sub = rospy.Subscriber("/tello/cmd", String, self.on_command)
        self._vel_sub = rospy.Subscriber("/tello/vel", Twist, self.on_twist)

        self._twist = Twist()
        self._freq = 30

        self._info_pub = rospy.Publisher("/tello/camera_info",CameraInfo,queue_size=1,latch=True)
        self._info = CameraInfo()
        self._info.header.frame_id = "camera1"
        self._info.height = 720
        self._info.width = 1280
        fx = 1000
        fy = fx
        cx = 640
        cy = 360
        self._info.distortion_model = 'rational_polynomial'
        self._info.D = [0.5248579382896423, -2.5943498611450195, 0.0008818571805022657, -0.000306136003928259, 1.4509135484695435, 0.4030783474445343, -2.42022705078125, 1.3811763525009155]
        self._info.K = [fx, 0.0, cx, 0.0, fy, cy, 0.0, 0.0, 1.0]
        self._info.R = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
        self._info.P =  [fx, 0.0, cx, 0.0, 0.0, fy, cy, 0.0, 0.0, 0.0, 1.0, 0.0]
        self._info.roi.do_rectify = False 
        
            
    def on_command(self, msg):
        if msg.data == "takeoff":
            self._tello.takeoff()
            self._tookoff = True
        if msg.data == "land":
            self._tookoff = False
            self._tello.land()

    def on_twist(self, msg):
        if not self._tookoff:
            return
        self._twist = msg
        self.set_vel()
    
    def set_vel(self):
        self._tello.send_rc_control(int(-100*self._twist.linear.y),int(100*self._twist.linear.x),int(100*self._twist.linear.z),int(-100*self._twist.angular.z))

    def publish_image(self):
        msg = ros_numpy.msgify(Image,self._frame_read.frame,"bgr8")
        self._image_pub.publish(msg)

    def publish_state(self):
        self._battery_pub.publish(self._tello.get_battery())

    def run(self):
        r = rospy.Rate(self._freq)
        while not rospy.is_shutdown():
            self.publish_state()
            self.publish_image()
            r.sleep()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('tello_driver')
    tello_driver = TelloDriver()
    signal.signal(signal.SIGINT, tello_driver.signal_handler)
    tello_driver.run()
