#!/usr/bin/env python
import rospy
from std_msgs.msg import String, Float64MultiArray
import signal
import sys
import PyKDL
import numpy as np

REFERENCE_FRAME='panda_link0'

class Mapping(object):
    def __init__(self):
        self._mapping = False
        self._i = 0
        self._freq = 100
        self._start_joints = [0,np.pi/4,0,0,0,0,0]

        ik_topic = '/panda_ik/output'
        ik_topic = '/JointController/panda/joint_command'

        self._goal_pub = rospy.Publisher(ik_topic, Float64MultiArray, queue_size=1)
        self._command_pub = rospy.Publisher("/panda_ik/commands", String, queue_size=1)
        rospy.sleep(.5)
        self._command_sub = rospy.Subscriber(ik_topic, Float64MultiArray, self.on_ik)
        rospy.sleep(.1)
        self._command_sub = rospy.Subscriber("/rvizToggle", String, self.on_command)

    def on_ik(self,msg):
        if not self._mapping:
            self._start_joints = np.array(msg.data)
    
    def on_command(self, msg):
        if msg.data == "on":
            self._command_pub.publish("stop_ik")
            self._mapping = True
            self._i = 0
            self._joints = [-3.8*np.pi/4,-np.pi/4,0,-np.pi/2,0,4*np.pi/8,-np.pi/4]
            self._stage = 1

    def move(self):
        t1 = 2*3*self._freq  
        t2 = 2*2*self._freq
        t3 = 2*10*self._freq
        t4 = 2*2*self._freq
        if self._stage == 1:
            self._i += 1
            if self._i > t1:
                self._i = 0
                self._stage = 2
        if self._stage == 2:
            self._i += 1
            msg = Float64MultiArray()
            msg.data = self._start_joints+(self._joints - self._start_joints)/t2 * self._i
            self._goal_pub.publish(msg)
            if self._i > t2:
                self._i = 0
                self._stage = 3
        if self._stage == 3:
            self._i += 1
            self._joints[0]+= 3.8/2*np.pi/t3
            msg = Float64MultiArray()
            msg.data = self._joints
            self._goal_pub.publish(msg)
            if self._i > t3:
                self._i = 0
                self._stage = 4
        if self._stage == 4:
            self._i += 1
            self._joints[0]-= 3/2*np.pi/t3
            msg = Float64MultiArray()
            msg.data = self._joints
            self._goal_pub.publish(msg)
            if self._i > t3:
                self._i = 0
                self._stage = 5
        if self._stage == 5:
            self._i += 1
            msg = Float64MultiArray()
            msg.data = self._joints+(self._start_joints-self._joints)/t4 * self._i
            self._goal_pub.publish(msg)
            if self._i > t4:
                self._i = 0
                self._stage = 6
        if self._stage == 6:
            self._command_pub.publish("start_ik")  
            self._mapping = False
    

    def run(self):
        r = rospy.Rate(self._freq)
        while not rospy.is_shutdown():
            if self._mapping:
                self.move()
            r.sleep()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('autonomous_mapping')
    mapping = Mapping()
    signal.signal(signal.SIGINT, mapping.signal_handler)
    mapping.run()
