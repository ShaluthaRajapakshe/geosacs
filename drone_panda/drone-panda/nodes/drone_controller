#!/usr/bin/env python
import numpy as np
import math
import rospy
import PyKDL
from scipy import signal as scisignal
import signal
import sys
import tf
from tf.transformations import *
import tf2_ros
from geometry_msgs.msg import Pose, Twist, Quaternion, TransformStamped
from tf.transformations import quaternion_from_euler as q_e
from tf.transformations import euler_from_quaternion as e_q
from tf2_geometry_msgs import PoseStamped
from sensor_msgs.msg import CameraInfo
from std_msgs.msg import String
import copy

REFERENCE_FRAME='panda_link0'
#REFERENCE_FRAME='mocap_world'

class VirtualDrone(object):
    def __init__(self):
        self._br = tf2_ros.TransformBroadcaster()
        self._tfBuffer = tf2_ros.Buffer()
        self._tl = tf2_ros.TransformListener(self._tfBuffer)
        rospy.sleep(.5)

        self._twist = Twist()
        t = TransformStamped()
        t.header.frame_id = REFERENCE_FRAME
        t.header.stamp = rospy.Time.now()

        t.child_frame_id = "drone"

        t.transform.translation.x = 1
        t.transform.translation.y = 0
        t.transform.translation.z = .5
        t.transform.rotation.z = 1

        self._freq = 120

        self._goal = None
        self._max_v_lin = .2
        self._max_v_h = .3
        self._max_v_rot = 2

        self._k_lin_h = .8
        self._d_lin_h = 5
        self._k_lin_v = 3
        self._d_lin_v = 2
        self._k_rot = 3
        self._d_rot = 0
        self._last_errors = np.zeros(4)
        self._last_d_errors = np.zeros(4)
        self._last_filtered_d_errors = np.zeros(4)
        self._b,self._a = scisignal.butter(1,0.001)
        #self._vel_pub = rospy.Publisher("/tello/vel",Twist,queue_size=1,latch=True)
        self._vel_pub = rospy.Publisher("/tello/vel",Twist,queue_size=1,latch=True)
        self._pose_sub = rospy.Subscriber("/panda_ik/drone_output", PoseStamped, self.on_pose)
        self._pid_sub = rospy.Subscriber("/pid_param", Pose, self.on_pid_param)
        self._ik_sub = rospy.Subscriber("/panda_ik/event",String, self.on_event)

    def on_event(self, msg):
        if msg.data == "start_goal_move":
            self._max_v_lin = .4
            self._k_lin_h = 2
            self._d_lin_h = 10
        if msg.data == "finish_goal_move":
            self._max_v_lin = .2
            self._k_lin_h = .8
            self._d_lin_h = 5


    def on_pid_param(self, msg):
        self._k_lin_h = msg.position.x
        self._d_lin_h = msg.position.y
        self._k_lin_v = msg.position.z
        self._d_lin_v = msg.orientation.x
        self._k_rot = msg.orientation.y
        self._d_rot = msg.orientation.z

    def filter(self, last_x,x,last_y):
        a=self._a
        b=self._b
        return (b[0]*x+b[1]*last_x-a[1]*last_y)/a[0]

    def on_pose(self, msg):
        self._goal = msg
        self.publish_drone_vel()

    def clamp(self, val, bound):
        return min(bound,max(-bound, val))

    def get_PD(self, e, d_e, k, d, max):
        command = k*e+d*d_e
        return self.clamp(command,max)

    def publish_drone_vel(self):
        if self._goal is not None:
            pose = self._tfBuffer.transform(self._goal,"drone")      
            q_pose = e_q([pose.pose.orientation.x,pose.pose.orientation.y,pose.pose.orientation.z,pose.pose.orientation.w])
            errors = np.array([pose.pose.position.x,pose.pose.position.y,pose.pose.position.z,q_pose[2]])
            #print(np.linalg.norm(errors[0:3]))
            d_errors = (self._last_d_errors-errors)/self._freq
            filtered_d_errors = np.zeros(4)
            for i in range(4):
                filtered_d_errors[i] = self.filter(self._last_d_errors[i],d_errors[i],self._last_filtered_d_errors[i])
            self._twist.linear.x =  self.get_PD(errors[0],filtered_d_errors[0],self._k_lin_h,self._d_lin_h,self._max_v_lin)
            self._twist.linear.y =  self.get_PD(errors[1],filtered_d_errors[1],self._k_lin_h,self._d_lin_h,self._max_v_lin)
            self._twist.linear.z =  self.get_PD(errors[2],filtered_d_errors[2],self._k_lin_v,self._d_lin_v,self._max_v_h)
            self._twist.angular.z = self.get_PD(errors[3],filtered_d_errors[3],self._k_rot,self._d_rot,self._max_v_rot)
            self._last_errors = errors
            self._last_d_errors = d_errors
            self._last_filtered_d_errors = filtered_d_errors
        else:
            self._twist = Twist()

        self._vel_pub.publish(self._twist)
        

    def run(self):
        r = rospy.Rate(self._freq)
        while not rospy.is_shutdown():
            self.publish_drone_vel()
            r.sleep()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('virtual_drone')
    virtual_drone = VirtualDrone()
    signal.signal(signal.SIGINT, virtual_drone.signal_handler)
    virtual_drone.run()
